<?php

/**
 * Implements hook_init().
 */
function uom_custom_init() 
{
	// Hide format selection on text areas.
	drupal_add_css('fieldset.filter-wrapper { display: none; }', array('type' => 'inline'));
	drupal_add_css('div.wysiwyg-toggle-wrapper { display: none; }', array('type' => 'inline'));

}




/**
 * Implements hook_formatter_info().
 */
function uom_custom_field_formatter_info() {
  return array(
    'uom_html5_phone_link' => array(
      'label' => t('HTML5 Phone Link'),
      'field types' => array('text'),
    ),
    'uom_image_floater' => array(
      'label' => t('Floated Image'),
      'field types' => array('image', 'file'),
      'settings' => array(
        'image_style' => '',
        'image_link' => '',
        'image_float' => '',
      ),
    ),
    'uom_image_colourbox' => array(
      'label' => t('Colourbox Image'),
      'field types' => array('image', 'file'),
      'settings' => array(
        'colorbox_node_style' => '',
        'colorbox_image_style' => '',
        'colorbox_gallery' => 'post',
        'colorbox_gallery_custom' => '',
        'colorbox_caption' => 'auto',
        'colorbox_caption_custom' => '',
        'image_style' => '',
        'image_link' => '',
        'image_float' => '',
      ),
    ),
    'uom_inline_file' => array(
      'label' => t('Inline File Link'),
      'field types' => array('file'),
    ),
  );
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function uom_custom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Settings for the floated image formatter.
  if ($display['type'] == 'uom_image_floater') {
    $element = image_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
    if ($field['cardinality'] != 1) {
      $element['image_float'] = _uom_custom_image_float_element($settings['image_float']);
    }
    return $element;
  }

  // Settings for the colourbox image formatter.
  if ($display['type'] == 'uom_image_colourbox') {
    $element = colorbox_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
    if ($field['cardinality'] != 1) {
      $element['image_float'] = _uom_custom_image_float_element($settings['image_float']);
    }
    return $element;
  }
}


/**
 * Helper that returns an image float control.
 */
function _uom_custom_image_float_element($default) {
  return array(
    '#title' => t('Float the image'),
    '#type' => 'select',
    '#options' => array('' => t('N/A'), 'left' => t('Left'), 'right' => t('Right')),
    '#description' => t('Float the image. If set to left or right, text will flow around the image.'),
    '#empty_option' => t('N/A'),
    '#default_value' => (!empty($default)) ? $default : '',
    '#weight' => -1,
  );
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function uom_custom_field_formatter_settings_summary($field, $instance, $view_mode) {
  if ($instance['display'][$view_mode]['type'] == 'uom_image_floater') {
    if ($instance['widget']['type'] == 'image_image') {
      $settings = $instance['display'][$view_mode]['settings'];

      $summary = explode('<br />', image_field_formatter_settings_summary($field, $instance, $view_mode));

      // Display this setting only if image float is set.
      if (isset($settings['image_float']) && !empty($settings['image_float'])) {
        $summary[] = t('Image Float: @float', array('@float' => $settings['image_float']));
      }

      return implode('<br />', $summary);
    }
  }

  if ($instance['display'][$view_mode]['type'] == 'uom_image_colourbox') {
    if ($instance['widget']['type'] == 'image_image') {
      $settings = $instance['display'][$view_mode]['settings'];

      $summary = explode('<br />', colorbox_field_formatter_settings_summary($field, $instance, $view_mode));

      // Display this setting only if image float is set.
      if (isset($settings['image_float']) && !empty($settings['image_float'])) {
        $summary[] = t('Image Float: @float', array('@float' => $settings['image_float']));
      }

      return implode('<br />', $summary);
    }
  }
}


/**
 * Implements hook_field_formatter_view().
 */
function uom_custom_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if (empty($display['module'])) $display['module'] = 'uom_custom';

  // Build variables array for formatter.
  $variables = array(
    '#obj_type' => $obj_type,
    '#object' => $object,
    '#field' => $field,
    '#instance' => $instance,
    '#langcode' => $langcode,
    '#items' => $items,
    '#display' => $display,
  );

  if (function_exists($function = "{$display['module']}_field_formatter_{$display['type']}")) {
    $element[0] = array(
      '#markup' => $function($variables),
    );
  }

  return $element;
}


function uom_custom_field_formatter_uom_inline_file($variables) {
  if (!empty($variables['#items'][0])) {
    return theme('uom_custom_inline_file', array('item' => $variables['#items'][0]));
  }
}


/**
 * Field formatter; Floated Image.
 */
function uom_custom_field_formatter_uom_image_floater($variables) {
  // Early return.
  if (empty($variables['#items'])) {
    return;
  }

  $elements = array();

  // Check if the formatter involves a link.
  if(!empty($variables['#display']['settings']['image_link'])) {
    if ($variables['#display']['settings']['image_link'] == 'content') {
      $uri = entity_uri($entity_type, $entity);
    }
    elseif ($variables['#display']['settings']['image_link'] == 'file') {
      $link_file = TRUE;
    }
  }

  foreach ($variables['#items'] as $delta => $item) {
    if (!empty($item['field_description']) && (empty($item['alt']) || empty($item['title']))) {
      $language = empty($item['language']) ? LANGUAGE_NONE : $item['language'];
      $title = $item['field_description'][$language][0]['safe_value'];
      $item['alt'] = $item['title'] = $title;
    }

    // Make *certain* an alt and title attribute are present.
    else if (empty($item['alt'])) {
      $item['alt'] = t('Unnamed Image');
    }
    if (!isset($item['title'])) {
      $item['title'] = '';
    }

    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    if (!empty($variables['#display']['settings']['image_float'])) {
      $item['attributes'] = array(
        'alt' => $item['alt'],
        'title' => $item['title'],
        'align' => $variables['#display']['settings']['image_float'],
        'class' => 'image-float-'. $variables['#display']['settings']['image_float'],
      );
    }

    $elements[$delta] = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => !empty($variables['#display']['settings']['image_style']) ? $variables['#display']['settings']['image_style'] : '',
      '#path' => isset($uri) ? $uri : '',
    );
  }

  return render($elements);
}

/**
 * Field formatter; Colorbox Image.
 */
function uom_custom_field_formatter_uom_image_colourbox($variables) {
  // Early return.
  if (empty($variables['#items'])) {
    return;
  }

  $elements = array();

  watchdog('uom_custom', print_r($variables, 1), array(), WATCHDOG_DEBUG);

  foreach ($variables['#items'] as $delta => $item) {
    if (!empty($item['field_description']) && (empty($item['alt']) || empty($item['title']))) {
      $language = empty($item['language']) ? LANGUAGE_NONE : $item['language'];
      $title = $item['field_description'][$language][0]['safe_value'];
      $item['alt'] = $item['title'] = $title;
    }

    // Make *certain* an alt and title attribute are present.
    else if (empty($item['alt'])) {
      $item['alt'] = t('Unnamed Image');
    }
    if (!isset($item['title'])) {
      $item['title'] = '';
    }

    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    if (!empty($variables['#display']['settings']['image_float'])) {
      $item['attributes'] = array(
        'class' => 'image-float-'. $variables['#display']['settings']['image_float'],
      );
    }

    $elements[$delta] = array(
      '#theme' => 'uom_custom_colourbox_image_formatter',
      '#item' => $item,
      '#node' => $variables['#object'],
      '#field' => $variables['#field'],
      '#display_settings' => $variables['#display']['settings'],
    );
  }

  return render($elements);
}


/**
 * Implements hook_theme().
 */

function uom_custom_theme($existing, $type, $theme, $path) {
  return array(
    'uom_custom_inline_file' => array(
      'variables' => array(
        'item' => NULL
      ),
      'file' => 'uom_custom.theme.inc',
    ),
    'uom_custom_colourbox_image_formatter' => array(
      'variables' => array(
        'item' => array(),
        'node' => NULL,
        'field' => NULL,
        'display_settings' => array(),
      ),
      'file' => 'uom_custom.theme.inc',
    ),
    'uom_custom_colourbox_imagefield' => array(
      'variables' => array(
        'image' => array(),
        'path' => NULL,
        'title' => NULL,
        'gid' => NULL,
        'class' => NULL,
      ),
      'file' => 'uom_custom.theme.inc',
    ),
  );
}


/**
 * Implements hook_wysiwyg_editor_settings_alter()
 */
function uom_custom_wysiwyg_editor_settings_alter(&$settings, $context) {
  // The $context variable contains information about the wysiwyg profile we're using
  // In this case we just need to check that the editor being used is ckeditor
  if ($context['profile']->editor == 'ckeditor') {
    // The $settings variable contains all the config options ckeditor uses. 
    // The array keys correspond directly with any setting that can be applied 
    // to CKEditor - as outlined in the CKEditor docs: 
    // http://docs.cksource.com/ckeditor_api/symbols/CKEDITOR.config.html 
    // Another way to override configuration is to use your own configuration javascript
    // file. In this case, we're going to add our own configuration file that will
    // Hold our stylesSet customizations... 
    $settings['customConfig'] = base_path() . drupal_get_path('module', 'uom_custom') . '/js/ckeditor_config.js';

    // We are also going to specify a custom body id and class
    $settings['bodyId'] = 'ckeditor_uom_custom_id';
    $settings['bodyClass'] = 'ckeditor_uom_custom_class';

    // To see what's in $settings and $context, install the devel module 
    // And run the variables through the dpm() function. 
  }

  // Make sure the toolbar is there
  if (!empty($settings['toolbar'])) {
    // These are our desired groupings. Buttons that aren't listed here will be
    // Grouped in one big group at the end
    $preferred_groupings[] = array('Source', 'Format', 'Styles');
    $preferred_groupings[] = array('Bold', 'Italic', 'Underline', 'Strike', 'Blockquote');
    $preferred_groupings[] = array('JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', 'BulletedList', 'NumberedList', 'Outdent', 'Indent');
    $preferred_groupings[] = array('Undo', 'Redo');
    $preferred_groupings[] = array('TextColor', 'BGColor');
    $preferred_groupings[] = array('Superscript', 'Subscript');
    $preferred_groupings[] = array('HorizontalRule', 'break');
    $preferred_groupings[] = array('Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord');
    $preferred_groupings[] = array('ShowBlocks', 'RemoveFormat', 'SpecialChar', '/');
    $preferred_groupings[] = array('Font', 'FontSize', 'Table');
    $preferred_groupings[] = array('SelectAll', 'Find', 'Replace');
    $preferred_groupings[] = array('Flash', 'Smiley');
	$preferred_groupings[] = array('Anchor', 'Image', 'linkit', 'Link', 'Unlink', 'wysiwyg_fields_field_page_image', 'wysiwyg_fields_field_page_document', 'wysiwyg_fields_field_event_image', 'wysiwyg_fields_field_event_document', 'wysiwyg_fields_field_landingpage_doc_uploader', 'wysiwyg_fields_field_account_document', 'wysiwyg_fields_field_account_image',);
    $preferred_groupings[] = array('CreateDiv', 'SpellChecker', 'Scayt', 'Maximize');

    // An array to hold our newly grouped buttons
    $new_grouped_toolbar = array();

    // Compare each desired groupings to the configured buttons in the toolbar
    // and add them if they are there
    foreach($preferred_groupings as $button_group){
      // array_intersect() compares two arrays and returns an array of values
      // That are present in both arrays.
      $matching_buttons = array_intersect($button_group, $settings['toolbar'][0]);

      if (!empty($matching_buttons)) {
        // If there are matching buttons, we add it as an array to our
        // $new_grouped_toolbar. We run $matching_buttons through array_values()
        // to reset the array keys back to starting from 0.
        $new_grouped_toolbar[] = array_values($matching_buttons);
      }
    }

    // For extra safety, we're going to find any remaining buttons that we
    // missed. To do this we need to flatten our grouped buttons and compare
    // that against the original toolbar to see if we missed anything
    $new_flattened_toolbar = array();

    // Flatten our grouped buttons
    foreach ($new_grouped_toolbar as $key => $group) {
      $new_flattened_toolbar = array_merge($new_flattened_toolbar, $group);
    }

    // Array diff returns the keys that are present in the first argument, but
    // not not present in the second
    $remaining_buttons = array_diff($settings['toolbar'][0], $new_flattened_toolbar);

    if (!empty($remaining_buttons)) {
      // reset the array keys and add it to the $new_grouped_toolbar
      $new_grouped_toolbar[] = array_values($remaining_buttons);
    }

    // Replace the toolbar with our new, grouped toolbar.
    $settings['toolbar'] = $new_grouped_toolbar;
  }
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function uom_custom_wysiwyg_plugin($editor) {
  if ($editor == 'ckeditor') {
    $path = 'sites/all/libraries/ckeditor/plugins/tableresize';
    if (file_exists("$path/plugin.js")) {
      return array(
        'tableresize' => array(
          'type' => 'buttons',
          'buttons' => array('TableResize' => t('Resize Table')),
          'path' => 'sites/all/libraries/ckeditor/plugins/tableresize',
          'load' => TRUE,
        ),
        'tabletools' => array(
          'type' => 'buttons',
          'buttons' => array('TableTools' => t('Table Tools')),
          'path' => 'sites/all/libraries/ckeditor/plugins/tabletools',
          'load' => TRUE,
        ),
      );
    }
  }
}


