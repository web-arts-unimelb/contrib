<?php


/**
 * Implementation of hook_menu().
 */
function prepro_menu() {
  return array(
    'admin/config/media/prepro' => array(
      'title' => 'Preprocessors',
      'description' => 'Configure media preprocessors',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('prepro_admin_form', 'css'),
      'access arguments' => array('administer site configuration'),
      'file' => 'prepro.admin.inc',
    ),
    'admin/config/media/prepro/css' => array(
      'title' => 'CSS',
      'description' => 'CSS preprocessors',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    ),
    'admin/config/media/prepro/js' => array(
      'title' => 'Javascript',
      'description' => 'Javascript preprocessors',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('prepro_admin_form', 'js'),
      'access arguments' => array('administer site configuration'),
      'file' => 'prepro.admin.inc',
      'type' => MENU_LOCAL_TASK,
    ),
  );
}

/**
 * Implementation of hook_element_info_alter().
 */
function prepro_element_info_alter(&$type) {
	array_unshift($type['styles']['#pre_render'], 'prepro_pre_render');
}


/**
 * Helper function for getting settings for prepro.
 */
function _prepro_get_settings($ext = NULL, $overwrite = array()) {
	$settings = array();
	if (!isset($ext) || $ext == 'css') {
		$settings['css'] = variable_get('prepro', array()) + array(
			'filetypes' => array(),
			'additional' => array(),
		);
	}
	if (!isset($ext) || $ext == 'js') {
		$settings['js'] = variable_get('prepro_js', array()) + array(
			'filetypes' => array(),
			'additional' => array(),
		);
	}
	if (isset($ext)) {
		$settings = isset($settings[$ext]) ? $settings[$ext] : array();
	}
	return $overwrite + $settings;
}


/**
 * Builds the preprocessed cache. Should only be invoked by drupal_render().
 *
 * @param $elements
 *   A render array containing:
 *   '#items': The CSS items as returned by drupal_add_css() and altered by
 *   drupal_get_css().
 *
 * @return $elements
 *   The modified (pre-rendered) $elements parameter.
 */
function prepro_pre_render($elements) {
  _prepro_process_assets('css', $elements['#items']);
	return $elements;
}

/**
 * Implements hook_js_alter().
 *
 * Implement preprocessing of javascript files.
 */
function prepro_js_alter(&$js) {
  _prepro_process_assets('js', $js);
}

/**
 * Main helper function which preprocesses an array of css / js files.
 */
function _prepro_process_assets($target_ext, &$items) {
	$settings = _prepro_get_settings($target_ext);
	$filetypes = _prepro_get_types($target_ext);
	$filenames = array();
	$map = cache_get('prepro:map:' . $target_ext);
	$map = $map ? $map->data : array();
	$original = $map;

	foreach ($items as $key => $file) {
		if ($file['type'] != 'file') {
			continue;
		}

		preg_match('/([^\/]+?)\.([^\.\/]+)$/', $file['data'], $match);
		$file['basename']  = $name = $match[1]; # path/to/lol.sass => lol
		$file['extension'] = $ext = $match[2]; # path/to/lol.sass => sass
		$file['target_extension'] = $target_ext;

		if (!isset($filetypes[$ext])) {
			continue;
		}

		$settings['filetypes'] += array($ext => array());
		$settings['filetypes'][$ext] += array(
			'cache' => 'onload',
			'cache_location' => 'public://prepro/',
			'preprocessor' => NULL,
		);
		$additional = $settings['filetypes'][$ext];

		// If the file is set to recompile on every page load then we don't want
		// it to be aggregated.
		$file['recompile'] = isset($file['recompile']) ? $file['recompile'] : FALSE;
		$file['preprocess'] = !empty($file['recompile']) ? FALSE : $file['preprocess'];

		// Create a unique identifier for the file.
		if ($file['recompile'] !== TRUE) {
			$hash = hash('sha256', serialize($file));
			$path = isset($map[$hash]) ? $map[$hash] : NULL;
		}

		// We recompile this file if recompile equals TRUE, array (and thereby the
		// hash value) changed, if the file doesn't exist, or if we are in development
		// mode. NOTE: You can use the 'recompile' array for your CSS files to cache
		// them based on advanced criteria.
		if ($additional['cache'] != 'cache' || $file['recompile'] === TRUE || !isset($path) || !file_exists($path)) {
			if ($additional['cache'] != 'cache') {
				$message = t('Prepro - your @type files are being processed on every page load, this may cause slowdown on production servers. !link', array('@type' => strtoupper($target_ext), '!link' => l('Click here to change', 'admin/config/media/prepro/'. $target_ext)));
				drupal_set_message($message, 'warning', false);
			}
			if (!$output = _prepro_compile($target_ext, $file)) {
				if ($ext != 'css') {
					unset($items[$key]);
				}
				continue;
			}
			# ensure we have a unique filename.
			if (isset($filenames[$name])) {
				$name = $name . '-' . substr(drupal_hash_base64($output), 0, 6);
			}
			$path = $additional['cache_location'] . '/' . $name . '.' . $target_ext;

			// Create the CSS file.
			if (empty($filenames)) {
				file_prepare_directory($additional['cache_location'], FILE_CREATE_DIRECTORY);
			}
			$filenames[$name] = true;
			if (!file_unmanaged_save_data($output, $path, FILE_EXISTS_REPLACE)) {
				unset($items[$key]);
				continue;
			}
		}

		// Update the item in the stylesheets array.
		$items[$key] = $file;
		$items[$key]['data'] = $path;
		if ($file['recompile'] !== TRUE) {
			// Don't cache this item if it is set to recompile on every page load.
			$map[$hash] = $path;
		}
	}
	// If $map and $original don't match anymore that means we need to update the
	// CSS cache.
	if ($original !== $map) {
		cache_set('prepro:map:' . $target_ext, $map, 'cache', CACHE_TEMPORARY);
	}
	return TRUE;
}

/**
 * Helper, returns an inverted list of preprocessors, keyed by filetype.
 *
 * @ext
 *  Return file types for either just 'css' or 'js'.
 */
function _prepro_get_types($ext = NULL) {
	$types =& drupal_static(__FUNCTION__);
	if (empty($types)) {
		$types = array('css' => array(), 'js' => array());
		foreach ($types as $file_ext => $void) {
			$hook = $file_ext . '_preprocessor_info';
			foreach (module_implements($hook) as $module) {
				foreach (module_invoke($module, $hook) as $name => $info) {
					$info['machine_name'] = $name;
					$info['module'] = $module;
					$info += array('callback' => $file_ext . '_preprocess_' . $name);
					foreach ($info['filetypes'] as $type) {
						$types[$file_ext] += array($type => array());
						$types[$file_ext][$type][$name] = $info;
					}
				}
			}
		}
	}
	if (isset($ext)) {
		return isset($types[$ext]) ? $types[$ext] : NULL;
	}
	return $types;
}

function _prepro_compile($target_ext, $file) {
	$hook = $target_ext . '_preprocessor_info';
	$settings = _prepro_get_settings($target_ext);
	$types = _prepro_get_types($target_ext);
	$ext = $file['extension'];

	if (isset($settings['filetypes'][$ext])) {
		$name = $settings['filetypes'][$ext]['preprocessor'];
		if (isset($types[$ext][$name])) {
			$info = $types[$ext][$name];
		}
	}
	if (!isset($info)) {
		$info = current($types[$ext]);
	}

	$compiler = $info['machine_name'];
	$settings['additional'] += array($compiler => array());
	$local = $settings['additional'][$compiler];
	$local['filetype'] = $settings['filetypes'][$file['extension']];

	$file['contents'] = '';
	if (!$contents = file_get_contents($file['data'])) {
		watchdog('Prepro', 'Prepro could not find the file %file for compilation', array('%file' => $file['data']), WATCHDOG_ERROR);
		return null;
	}
	drupal_alter('prepro_precompile', $contents, $file, $local);
	drupal_alter('prepro_precompile_' . $ext, $contents, $file, $local);
	drupal_alter('prepro_precompile_' . $target_ext, $contents, $file, $local);
	$file['contents'] = $contents;

	if ($result = module_invoke($info['module'], $info['callback'], $file, $local, $settings)) {
		if ($target_ext === 'css') {
		  _drupal_build_css_path(NULL, base_path() . dirname($file['data']) .'/');
		  $result = preg_replace_callback('/url\([\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\)/i', '_drupal_build_css_path', $result);
		}
		drupal_alter('prepro_postcompile', $result, $file, $local);
		drupal_alter('prepro_postcompile_' . $ext, $result, $file, $local);
		drupal_alter('prepro_postcompile_' . $target_ext, $result, $file, $local);
		return $result;
	}
}

/**
 * Implements hook_module_implements_alter().
 */
function prepro_module_implements_alter(&$implementations, $hook) {

  // Move our hook_js_alter() after everyone else's for consistency.
	if ($hook == 'js_alter') {
		$group = $implementations['prepro'];
		unset($implementations['prepro']);
		$implementations['prepro'] = $group;
	}
}

/**
 * Implementation of hook_flush_caches().
 */
function prepro_flush_caches() {
  prepro_clear_cache();
}
/**
 * Deletes old cached SCSS files.
 */
function prepro_clear_cache() {
	$settings = _prepro_get_settings();

  foreach ($settings as $ext => $ext_settings) {
		foreach ($ext_settings['filetypes'] as $type) {
			$type += array(
				'cache_location' => 'public://prepro/'
			);
			file_scan_directory($type['cache_location'], '/.*/', array('callback' => 'drupal_delete_file_if_stale'));
		}
	}
}
